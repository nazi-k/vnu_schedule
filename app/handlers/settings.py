from aiogram import Dispatcher, types
from aiogram.utils.exceptions import MessageNotModified
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.callback_data import CallbackData
from contextlib import suppress

from typing import Optional

from app import schedule
from app.models import Subscriber


callback_settings = CallbackData("settings", "key", "value")
# "subgroup", "reminder", "show_online_link", "notification_from_moderator"


def _get_subgroup(subgroup: Optional[int]) -> str:
    if subgroup == 1:
        return "–ø–µ—Ä—à–∞"
    if subgroup == 2:
        return "–¥—Ä—É–≥–∞"
    else:
        return "–∑–∞–≥–∞–ª—å–Ω–∞"


def get_keyboard_settings(subscriber: Subscriber) -> InlineKeyboardMarkup:

    buttons_subgroup = [
        InlineKeyboardButton(text=f"{'‚ñ∂Ô∏è' if subscriber.subgroup == 1 else ''}l –≥—Ä—É–ø–∞",
                             callback_data=callback_settings.new(key="subgroup", value="1")),

        InlineKeyboardButton(text=f"{'‚ñ∂Ô∏è' if not subscriber.subgroup else ''}–û–±–∏–¥–≤—ñ",
                             callback_data=callback_settings.new(key="subgroup", value="0")),

        InlineKeyboardButton(text=f"{'‚ñ∂Ô∏è' if subscriber.subgroup == 2 else ''}ll –≥—Ä—É–ø–∞",
                             callback_data=callback_settings.new(key="subgroup", value="2"))
    ]

    button_reminder_time = InlineKeyboardButton(
        text=f"–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞{'‚úÖÔ∏è' if subscriber.reminder else '‚ùé'}",
        callback_data=callback_settings.new(key="reminder",
                                            value=f"{'0' if subscriber.reminder else '1'}")
    )
    buttons_show_online_link = InlineKeyboardButton(
        text=f"–û–Ω–ª–∞–π–Ω –∑–∞–Ω—è—Ç—Ç—è{'‚úÖÔ∏è' if subscriber.show_online_link else '‚ùé'}",
        callback_data=callback_settings.new(key="show_online_link",
                                            value=f"{'0' if subscriber.show_online_link else '1'}")
    )
    buttons_notification_from_moderator = InlineKeyboardButton(
        text=f"–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞{'üîî' if subscriber.notification_from_moderator else 'üîï'}",
        callback_data=callback_settings.new(key="notification_from_moderator",
                                            value=f"{'0' if subscriber.notification_from_moderator else '1'}")
    )
    keyboard = InlineKeyboardMarkup(row_width=3)
    keyboard.add(*buttons_subgroup)
    keyboard.add(button_reminder_time)
    keyboard.add(buttons_show_online_link)
    keyboard.add(buttons_notification_from_moderator)
    return keyboard


def get_settings_text(subscriber: Subscriber) -> str:
    """–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ parse_mode='HTML'"""
    return f"‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:</b>\n\n" \
           f"üìö <b>–ì—Ä—É–ø–∞:</b> {subscriber.group_name}\n" \
           f"üë®üèª‚Äçüéì <b>–ü—ñ–¥–≥—Ä—É–ø–∞:</b> {_get_subgroup(subscriber.subgroup)}\n" \
           f"‚è∞ <b>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:</b> {'–≤–≤—ñ–º–∫–Ω–µ–Ω–µ' if subscriber.reminder else '–≤–∏–º–∫–Ω–µ–Ω–µ'}\n" \
           f"üñá <b>–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–Ω–ª–∞–π–Ω –∑–∞–Ω—è—Ç—Ç—è:</b> {'–ø–æ–∫–∞–∑—É–≤–∞—Ç–∏' if subscriber.show_online_link else '–ø—Ä–∏—Ö–æ–≤–∞—Ç–∏'}\n" \
           f"üõéÔ∏è <b>–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:</b> {'–Ω–µ ' if not subscriber.notification_from_moderator else ''}–æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏"


async def update_settings(message: types.Message):
    with suppress(MessageNotModified):
        subscriber = schedule.get_subscriber(message.chat.id)
        await message.edit_text(get_settings_text(subscriber),
                                reply_markup=get_keyboard_settings(subscriber),
                                parse_mode='HTML')


async def callbacks_settings(call: types.CallbackQuery, callback_data: dict):
    new_settings = {callback_data["key"]: callback_data["value"]}
    schedule.set_subscriber_settings(call.message.chat.id, new_settings)
    await update_settings(call.message)
    await call.answer()


def register_handlers_settings(dp: Dispatcher):
    dp.register_callback_query_handler(callbacks_settings, callback_settings.filter(), state="*")
