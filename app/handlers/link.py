from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from random import choice

from app import schedule
from app.handlers.moderator import send_url_for_audit


class LinkState(StatesGroup):
    set_url = State()
    change_url = State()


async def answer_troll(message: types.Message):
    responses = ["–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\n–∂–∞—Ä—Ç—É—é. —è–∫ —ñ —Ç–∏.", "–ó–Ω—É—â–∞—î—à—Å—è –∑ –º–µ–Ω–µ?", "¬ø?¬ø?", "–¶–µ –∂ –Ω–µ —Ç–≤—ñ–π –ø—Ä–µ–¥–º–µ—Ç!", "üëÄ"]
    await message.answer(choice(responses))


async def non_moderator(message: types.Message):
    await message.answer("‚ùå –í–∞—à–∞ –≥—Ä—É–ø–∞ –Ω–∞—Ä–∞–∑—ñ –Ω–µ –º–∞—î –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞! –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @naz1_k!")


async def cmd_link(message: types.Message):
    subject_id = message.text.replace('/link', '').split(' ')[0]
    if subject_id.isdecimal():
        subject_id = int(subject_id)
        if schedule.is_his_subject(message.from_user.id, subject_id):
            online_lesson = schedule.get_online_lesson_url_and_name(subject_id)
            if online_lesson['url']:
                await message.answer(f'<a href="{online_lesson["url"]}">{online_lesson["name"]}</a>\n'
                                     f'‚úèÔ∏è–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:',
                                     reply_markup=types.ReplyKeyboardRemove(), parse_mode='HTML',
                                     disable_web_page_preview=True)
                await LinkState.change_url.set()
            else:
                # –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
                moderator_id = schedule.get_his_group_moderator(message.from_user.id)
                if moderator_id:
                    schedule.add_wait_subject_url(message.from_user.id, subject_id)
                    await message.answer(f"<b>{online_lesson['name']}\n</b>‚úèÔ∏è–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è:",
                                         reply_markup=types.ReplyKeyboardRemove(), parse_mode='HTML')
                    await LinkState.set_url.set()
                else:
                    # –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π
                    await non_moderator(message)
        else:
            # –Ω–µ –π–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç
            await answer_troll(message)
    else:
        # –≤–≤—ñ–≤ —â–æ—Å—å –Ω–µ —Ç–µ
        await answer_troll(message)


def _verification_url(url: str) -> bool:
    return url.startswith(("https://meet.google.com", "https://zoom.us", "https://astoundcommerce.zoom.us"))


async def invalid_url(message: types.Message):
    await message.answer("–ù–µ —Å—Ö–æ–∂–µ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑–∞–Ω—è—Ç—Ç—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑:")


async def audit_url(message: types.Message, state: FSMContext, change: bool):
    if _verification_url(message.text):
        moderator_id = schedule.get_his_group_moderator(message.from_user.id)
        if moderator_id:
            subject_id = schedule.get_wait_subject_url_subject_id(message.from_user.id)
            if moderator_id == message.from_user.id:
                schedule.add_online_lesson_url(subject_id, message.text.split(' ')[0])
                await message.answer("–ü–æ—Å–∏–ª–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
                return
            await send_url_for_audit(message, moderator_id, subject_id, change)
            await message.answer('–ü–æ—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.')
            await state.finish()
        else:
            await state.finish()
            await non_moderator(message)
    else:
        await invalid_url(message)


async def audit_change_url(message: types.Message, state: FSMContext):
    await audit_url(message, state, change=True)


async def audit_set_url(message: types.Message, state: FSMContext):
    await audit_url(message, state, change=False)


def register_handlers_link(dp: Dispatcher):
    dp.register_message_handler(cmd_link, Text(startswith="/link"), state="*")
    dp.register_message_handler(audit_set_url, state=LinkState.set_url)
    dp.register_message_handler(audit_change_url, state=LinkState.change_url)
